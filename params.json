{
  "name": "Glove",
  "tagline": "Crystal framework for making games",
  "body": "Glove is a framework for making games. It is implemented in [Crystal](https://crystal-lang.org/).\r\n\r\n**Caution!** Glove is experimental. Expect many breaking changes. There are no tests. Do not use this for your own projects.\r\n\r\n## Example code\r\n\r\nHere is a trivial example that renders a card (from `assets/card.png`):\r\n\r\n```crystal\r\nrequire \"glove\"\r\n\r\ncard =\r\n  Glove::Entity.new.tap do |e|\r\n    e << Glove::Components::Texture.new(\"assets/card.png\")\r\n    e << Glove::Components::Transform.new.tap do |t|\r\n      t.width = 140_f32\r\n      t.height = 190_f32\r\n      t.translate_x = 400_f32\r\n      t.translate_y = 300_f32\r\n    end\r\n  end\r\n\r\nscene =\r\n  Glove::Scene.new.tap do |scene|\r\n    scene.spaces << Glove::Space.new.tap do |space|\r\n      space.entities << card\r\n    end\r\n  end\r\n\r\ngame = Glove::EntityApp.new(800, 600, \"Inari\")\r\ngame.clear_color = Glove::Color::WHITE\r\ngame.replace_scene(scene)\r\ngame.run\r\n```\r\n\r\n## Architecture\r\n\r\n* `Glove::EntityApp` is a generic game superclass that provides functionality for handling entities, and everything associated with it. Here is how a typical game would build an instance and run the game:\r\n\r\n  ```crystal\r\n  game = Glove::EntityApp.new(800, 600, \"Inari\")\r\n  game.clear_color = Glove::Color::WHITE\r\n  scene = Glove::Scene.new.tap do |scene|\r\n    # … build scene here …\r\n  end\r\n  game.replace_scene(scene)\r\n  game.run\r\n  ```\r\n\r\n* `Glove::Entity` is a game object that is visible and/or reacts to user input.\r\n\r\n* `Glove::Component` is a property of an entity. A common component is `Glove::Components::Transform`, which adds width, height, rotation, scale, … to an entity. Another common component is `Glove::Components::Camera`, which marks an entity as being a camera, and defines which part of a space (see below) will be rendered, with what rotation, etc.\r\n\r\n* `Glove::Action` defines a change to an entity. It can either be instant (e.g. remove entity) or act over time (e.g. move).\r\n\r\n* `Glove::Space` groups entities in a scene that logically belong together and can interact with each other. Entities in different spaces never interact. For example, one space might contain the game entities, and another space might contain UI elements.\r\n\r\n* `Glove::Scene` describes a scene (such as the main menu, credits, or in-game screen). It contains one or more spaces.\r\n\r\nThere are also a handful of simple data classes:\r\n\r\n* `Glove::Color`\r\n* `Glove::Point`\r\n* `Glove::Quad`\r\n* `Glove::Rect`\r\n* `Glove::Size`\r\n* `Glove::Vector`\r\n\r\n## Acknowledgements\r\n\r\nThis project started out by playing with [crystal-gl](https://github.com/ggiraldez/crystal-gl) by Gustavo Giráldez.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}